[
    {
        "label": "BaseController",
        "importPath": "controller.base_controller",
        "description": "controller.base_controller",
        "isExtraImport": true,
        "detail": "controller.base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "controller.base_controller",
        "description": "controller.base_controller",
        "isExtraImport": true,
        "detail": "controller.base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "controller.base_controller",
        "description": "controller.base_controller",
        "isExtraImport": true,
        "detail": "controller.base_controller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "importPath": "controller.base_controller",
        "description": "controller.base_controller",
        "isExtraImport": true,
        "detail": "controller.base_controller",
        "documentation": {}
    },
    {
        "label": "SideBarView",
        "importPath": "view.components.sidebar.sidebar",
        "description": "view.components.sidebar.sidebar",
        "isExtraImport": true,
        "detail": "view.components.sidebar.sidebar",
        "documentation": {}
    },
    {
        "label": "SideBarController",
        "importPath": "controller.components.sidebar_controller",
        "description": "controller.components.sidebar_controller",
        "isExtraImport": true,
        "detail": "controller.components.sidebar_controller",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SimulationModel",
        "importPath": "model.simulation",
        "description": "model.simulation",
        "isExtraImport": true,
        "detail": "model.simulation",
        "documentation": {}
    },
    {
        "label": "SimulationModel",
        "importPath": "model.simulation",
        "description": "model.simulation",
        "isExtraImport": true,
        "detail": "model.simulation",
        "documentation": {}
    },
    {
        "label": "BaseComponentView",
        "importPath": "view.components.base_component",
        "description": "view.components.base_component",
        "isExtraImport": true,
        "detail": "view.components.base_component",
        "documentation": {}
    },
    {
        "label": "BaseComponentView",
        "importPath": "view.components.base_component",
        "description": "view.components.base_component",
        "isExtraImport": true,
        "detail": "view.components.base_component",
        "documentation": {}
    },
    {
        "label": "BaseComponentView",
        "importPath": "view.components.base_component",
        "description": "view.components.base_component",
        "isExtraImport": true,
        "detail": "view.components.base_component",
        "documentation": {}
    },
    {
        "label": "BaseScreenView",
        "importPath": "view.screens.base_screen",
        "description": "view.screens.base_screen",
        "isExtraImport": true,
        "detail": "view.screens.base_screen",
        "documentation": {}
    },
    {
        "label": "BaseScreenView",
        "importPath": "view.screens.base_screen",
        "description": "view.screens.base_screen",
        "isExtraImport": true,
        "detail": "view.screens.base_screen",
        "documentation": {}
    },
    {
        "label": "BaseScreenView",
        "importPath": "view.screens.base_screen",
        "description": "view.screens.base_screen",
        "isExtraImport": true,
        "detail": "view.screens.base_screen",
        "documentation": {}
    },
    {
        "label": "BaseNode",
        "importPath": "model.node.BaseNode",
        "description": "model.node.BaseNode",
        "isExtraImport": true,
        "detail": "model.node.BaseNode",
        "documentation": {}
    },
    {
        "label": "BaseNode",
        "importPath": "model.node.BaseNode",
        "description": "model.node.BaseNode",
        "isExtraImport": true,
        "detail": "model.node.BaseNode",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "BaseSimulationGrid",
        "importPath": "model.grid.BaseSimulationGrid",
        "description": "model.grid.BaseSimulationGrid",
        "isExtraImport": true,
        "detail": "model.grid.BaseSimulationGrid",
        "documentation": {}
    },
    {
        "label": "BaseSimulationGrid",
        "importPath": "model.grid.BaseSimulationGrid",
        "description": "model.grid.BaseSimulationGrid",
        "isExtraImport": true,
        "detail": "model.grid.BaseSimulationGrid",
        "documentation": {}
    },
    {
        "label": "Widget",
        "importPath": "kivy.uix.widget",
        "description": "kivy.uix.widget",
        "isExtraImport": true,
        "detail": "kivy.uix.widget",
        "documentation": {}
    },
    {
        "label": "ButtonBehavior",
        "importPath": "kivy.uix.behaviors",
        "description": "kivy.uix.behaviors",
        "isExtraImport": true,
        "detail": "kivy.uix.behaviors",
        "documentation": {}
    },
    {
        "label": "ColorProperty",
        "importPath": "kivy.properties",
        "description": "kivy.properties",
        "isExtraImport": true,
        "detail": "kivy.properties",
        "documentation": {}
    },
    {
        "label": "ListProperty",
        "importPath": "kivy.properties",
        "description": "kivy.properties",
        "isExtraImport": true,
        "detail": "kivy.properties",
        "documentation": {}
    },
    {
        "label": "OptionProperty",
        "importPath": "kivy.properties",
        "description": "kivy.properties",
        "isExtraImport": true,
        "detail": "kivy.properties",
        "documentation": {}
    },
    {
        "label": "ColorProperty",
        "importPath": "kivy.properties",
        "description": "kivy.properties",
        "isExtraImport": true,
        "detail": "kivy.properties",
        "documentation": {}
    },
    {
        "label": "MDIconButton",
        "importPath": "kivymd.uix.button",
        "description": "kivymd.uix.button",
        "isExtraImport": true,
        "detail": "kivymd.uix.button",
        "documentation": {}
    },
    {
        "label": "MDIconButton",
        "importPath": "kivymd.uix.button",
        "description": "kivymd.uix.button",
        "isExtraImport": true,
        "detail": "kivymd.uix.button",
        "documentation": {}
    },
    {
        "label": "MDExpansionPanel",
        "importPath": "kivymd.uix.expansionpanel",
        "description": "kivymd.uix.expansionpanel",
        "isExtraImport": true,
        "detail": "kivymd.uix.expansionpanel",
        "documentation": {}
    },
    {
        "label": "CommonElevationBehavior",
        "importPath": "kivymd.uix.behaviors",
        "description": "kivymd.uix.behaviors",
        "isExtraImport": true,
        "detail": "kivymd.uix.behaviors",
        "documentation": {}
    },
    {
        "label": "RotateBehavior",
        "importPath": "kivymd.uix.behaviors",
        "description": "kivymd.uix.behaviors",
        "isExtraImport": true,
        "detail": "kivymd.uix.behaviors",
        "documentation": {}
    },
    {
        "label": "MDDropdownMenu",
        "importPath": "kivymd.uix.menu",
        "description": "kivymd.uix.menu",
        "isExtraImport": true,
        "detail": "kivymd.uix.menu",
        "documentation": {}
    },
    {
        "label": "MDTextField",
        "importPath": "kivymd.uix.textfield",
        "description": "kivymd.uix.textfield",
        "isExtraImport": true,
        "detail": "kivymd.uix.textfield",
        "documentation": {}
    },
    {
        "label": "AVAILABLE_GRIDS",
        "importPath": "model.grid",
        "description": "model.grid",
        "isExtraImport": true,
        "detail": "model.grid",
        "documentation": {}
    },
    {
        "label": "ThemeManager",
        "importPath": "theme",
        "description": "theme",
        "isExtraImport": true,
        "detail": "theme",
        "documentation": {}
    },
    {
        "label": "ThemeManager",
        "importPath": "theme",
        "description": "theme",
        "isExtraImport": true,
        "detail": "theme",
        "documentation": {}
    },
    {
        "label": "BoxLayout",
        "importPath": "kivy.uix.boxlayout",
        "description": "kivy.uix.boxlayout",
        "isExtraImport": true,
        "detail": "kivy.uix.boxlayout",
        "documentation": {}
    },
    {
        "label": "Builder",
        "importPath": "kivy.lang",
        "description": "kivy.lang",
        "isExtraImport": true,
        "detail": "kivy.lang",
        "documentation": {}
    },
    {
        "label": "Builder",
        "importPath": "kivy.lang",
        "description": "kivy.lang",
        "isExtraImport": true,
        "detail": "kivy.lang",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "kivy.uix.screenmanager",
        "description": "kivy.uix.screenmanager",
        "isExtraImport": true,
        "detail": "kivy.uix.screenmanager",
        "documentation": {}
    },
    {
        "label": "ScreenManager",
        "importPath": "kivy.uix.screenmanager",
        "description": "kivy.uix.screenmanager",
        "isExtraImport": true,
        "detail": "kivy.uix.screenmanager",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "W",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "kivy.core.window",
        "description": "kivy.core.window",
        "isExtraImport": true,
        "detail": "kivy.core.window",
        "documentation": {}
    },
    {
        "label": "MDApp",
        "importPath": "kivymd.tools.hotreload.app",
        "description": "kivymd.tools.hotreload.app",
        "isExtraImport": true,
        "detail": "kivymd.tools.hotreload.app",
        "documentation": {}
    },
    {
        "label": "ControllerRegistry",
        "importPath": "controller.contoller_registry",
        "description": "controller.contoller_registry",
        "isExtraImport": true,
        "detail": "controller.contoller_registry",
        "documentation": {}
    },
    {
        "label": "MainScreenController",
        "importPath": "controller.screens.main_screen_contoller",
        "description": "controller.screens.main_screen_contoller",
        "isExtraImport": true,
        "detail": "controller.screens.main_screen_contoller",
        "documentation": {}
    },
    {
        "label": "MainScreenView",
        "importPath": "view.screens.main_screen.main_screen",
        "description": "view.screens.main_screen.main_screen",
        "isExtraImport": true,
        "detail": "view.screens.main_screen.main_screen",
        "documentation": {}
    },
    {
        "label": "EventDispatcher",
        "importPath": "kivy.event",
        "description": "kivy.event",
        "isExtraImport": true,
        "detail": "kivy.event",
        "documentation": {}
    },
    {
        "label": "convert_hex_to_decimal",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "LabelBase",
        "importPath": "kivy.core.text",
        "description": "kivy.core.text",
        "isExtraImport": true,
        "detail": "kivy.core.text",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "SideBarController",
        "kind": 6,
        "importPath": "src.controller.components.sidebar_controller",
        "description": "src.controller.components.sidebar_controller",
        "peekOfCode": "class SideBarController(BaseController):\n    def __init__(self, simulation):\n        super().__init__(SideBarView(), \"sidebar\", simulation)",
        "detail": "src.controller.components.sidebar_controller",
        "documentation": {}
    },
    {
        "label": "MainScreenController",
        "kind": 6,
        "importPath": "src.controller.screens.main_screen_contoller",
        "description": "src.controller.screens.main_screen_contoller",
        "peekOfCode": "class MainScreenController(BaseController):\n    sidebar: SideBarController\n    \"\"\"\n    The sidebar controller for the main screen. This is a child controller and just a quick\n    way to access the sidebar controller\n    \"\"\"\n    def __init__(self, view, name, simulation):\n        self.sidebar = SideBarController(simulation)\n        self.child_controllers.append(self.sidebar)\n        super().__init__(view, name, simulation)",
        "detail": "src.controller.screens.main_screen_contoller",
        "documentation": {}
    },
    {
        "label": "BaseController",
        "kind": 6,
        "importPath": "src.controller.base_controller",
        "description": "src.controller.base_controller",
        "peekOfCode": "class BaseController(ABC):\n    name: str\n    \"\"\"\n    The name of the controller. This is used to identify the controller in the controller registry.\n    \"\"\"\n    view: BaseScreenView | BaseComponentView\n    \"\"\"\n    Stores a reference to the view that the controller is controlling.\n    \"\"\"\n    simulation: SimulationModel",
        "detail": "src.controller.base_controller",
        "documentation": {}
    },
    {
        "label": "ControllerRegistry",
        "kind": 6,
        "importPath": "src.controller.contoller_registry",
        "description": "src.controller.contoller_registry",
        "peekOfCode": "class ControllerRegistry:\n    _controllers: Dict[str, BaseController] = {}\n    \"\"\"\n    A dictionary that stores all registered controllers of the application\n    \"\"\"\n    @classmethod\n    def register(cls, controller: BaseController) -> None:\n        \"\"\"\n        Regsiter a controller in the application. This allows the controller to\n        be accessed anywhere in the application.",
        "detail": "src.controller.contoller_registry",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.controller.contoller_registry",
        "description": "src.controller.contoller_registry",
        "peekOfCode": "T = TypeVar(\"T\", bound=BaseController)\nclass ControllerRegistry:\n    _controllers: Dict[str, BaseController] = {}\n    \"\"\"\n    A dictionary that stores all registered controllers of the application\n    \"\"\"\n    @classmethod\n    def register(cls, controller: BaseController) -> None:\n        \"\"\"\n        Regsiter a controller in the application. This allows the controller to",
        "detail": "src.controller.contoller_registry",
        "documentation": {}
    },
    {
        "label": "BaseSimulationGrid",
        "kind": 6,
        "importPath": "src.model.grid.BaseSimulationGrid",
        "description": "src.model.grid.BaseSimulationGrid",
        "peekOfCode": "class BaseSimulationGrid(ABC):\n    name: str\n    \"\"\"\n    Name of this simulation Grid\n    \"\"\"\n    description: str\n    \"\"\"\n    Description of this simulation grid\n    \"\"\"\n    icon: str",
        "detail": "src.model.grid.BaseSimulationGrid",
        "documentation": {}
    },
    {
        "label": "SimpleRandomGrid",
        "kind": 6,
        "importPath": "src.model.grid.SimpleRandomGrid",
        "description": "src.model.grid.SimpleRandomGrid",
        "peekOfCode": "class SimpleRandomGrid(BaseSimulationGrid):\n    name: str = \"Simple Random Grid\"\n    description: str = (\n        \"A simple grid that places nodes randomly within the grid. The grid is divided into a number of regions in order to reduce calculations required to detect collisions.\"\n    )\n    icon: str = \"dots-grid\"\n    def __init__(self, width: int, length: int, region_size: int):\n        self.width = width\n        self.length = length\n        self.region_size = region_size",
        "detail": "src.model.grid.SimpleRandomGrid",
        "documentation": {}
    },
    {
        "label": "BaseNode",
        "kind": 6,
        "importPath": "src.model.node.BaseNode",
        "description": "src.model.node.BaseNode",
        "peekOfCode": "class BaseNode(ABC):\n    \"\"\"\n    Represents a node in the simulation network.\n    \"\"\"\n    name: str\n    \"\"\"\n    The name of this node type\n    \"\"\"\n    position: Tuple[float, float]\n    \"\"\"",
        "detail": "src.model.node.BaseNode",
        "documentation": {}
    },
    {
        "label": "SimulationModel",
        "kind": 6,
        "importPath": "src.model.simulation",
        "description": "src.model.simulation",
        "peekOfCode": "class SimulationModel:\n    grid: BaseSimulationGrid | None\n    \"\"\"\n    The grid that the simulation is running on.\n    \"\"\"\n    def __init__(self):\n        self.grid = None",
        "detail": "src.model.simulation",
        "documentation": {}
    },
    {
        "label": "SideBarView",
        "kind": 6,
        "importPath": "src.view.components.sidebar.sidebar",
        "description": "src.view.components.sidebar.sidebar",
        "peekOfCode": "class SideBarView(BaseComponentView, CommonElevationBehavior):\n    kv_file = \"view/components/sidebar/sidebar.kv\"\n    elevation_level = 4\n    shadow_radius = [20, 20, 20, 20]\n    shadow_softness = 5\n    # shadow_offset = [5, 0]\nclass GridSettingsExpansionView(  # type: ignore\n    ButtonBehavior,\n    MDExpansionPanel,\n):",
        "detail": "src.view.components.sidebar.sidebar",
        "documentation": {}
    },
    {
        "label": "GridSettingsExpansionView",
        "kind": 6,
        "importPath": "src.view.components.sidebar.sidebar",
        "description": "src.view.components.sidebar.sidebar",
        "peekOfCode": "class GridSettingsExpansionView(  # type: ignore\n    ButtonBehavior,\n    MDExpansionPanel,\n):\n    background_color = ColorProperty(ThemeManager().secondary_bg_color)\n    \"\"\"\n    Controls the background color of the expansion panel when swityching between open and closed states\n    \"\"\"\n    border_radius = ListProperty()\n    \"\"\"",
        "detail": "src.view.components.sidebar.sidebar",
        "documentation": {}
    },
    {
        "label": "GridTypeSelector",
        "kind": 6,
        "importPath": "src.view.components.sidebar.sidebar",
        "description": "src.view.components.sidebar.sidebar",
        "peekOfCode": "class GridTypeSelector(MDTextField):\n    menu: MDDropdownMenu\n    \"\"\"\n    The dropdown menu that is displayed when the text field is focused\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.bind(text=self.on_text_changed)\n    def on_text_changed(self, text, *args) -> None:\n        \"\"\"",
        "detail": "src.view.components.sidebar.sidebar",
        "documentation": {}
    },
    {
        "label": "BaseComponentView",
        "kind": 6,
        "importPath": "src.view.components.base_component",
        "description": "src.view.components.base_component",
        "peekOfCode": "class BaseComponentView(BoxLayout):\n    kv_file: str = \"\"\n    \"\"\"\n    The kv file for the component. This must be defined in the subclass.\n    \"\"\"\n    def __init__(self):\n        Builder.load_file(self.kv_file)\n        super().__init__()",
        "detail": "src.view.components.base_component",
        "documentation": {}
    },
    {
        "label": "Chevron",
        "kind": 6,
        "importPath": "src.view.components.chevron",
        "description": "src.view.components.chevron",
        "peekOfCode": "class Chevron(MDIconButton, RotateBehavior): ...",
        "detail": "src.view.components.chevron",
        "documentation": {}
    },
    {
        "label": "MainScreenView",
        "kind": 6,
        "importPath": "src.view.screens.main_screen.main_screen",
        "description": "src.view.screens.main_screen.main_screen",
        "peekOfCode": "class MainScreenView(BaseScreenView):\n    name: str = \"main_screen\"\n    kv_file: str = \"view/screens/main_screen/main_screen.kv\"",
        "detail": "src.view.screens.main_screen.main_screen",
        "documentation": {}
    },
    {
        "label": "BaseScreenView",
        "kind": 6,
        "importPath": "src.view.screens.base_screen",
        "description": "src.view.screens.base_screen",
        "peekOfCode": "class BaseScreenView(Screen):\n    kv_file: str = \"\"\n    \"\"\"\n    All screens must define a basekv file. In development mode these KV files\n    are auto hot reloaded\n    \"\"\"\n    def __init__(self):\n        Builder.load_file(self.kv_file)\n        super().__init__()",
        "detail": "src.view.screens.base_screen",
        "documentation": {}
    },
    {
        "label": "ChronosSim",
        "kind": 6,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "class ChronosSim(MDApp):\n    title: str = \"Network Simulator\"\n    screen_manager: ScreenManager\n    simulation_model: SimulationModel\n    theme_manager: ThemeManager\n    KV_FILES: List[str] = get_all_kv_files(\"view\")\n    def build_app(self, first: bool = False) -> ScreenManager:\n        Window.maximize()\n        Window.bind(on_keyboard=self.on_keyboard_down)\n        self.theme_manager = ThemeManager()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "get_all_kv_files",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def get_all_kv_files(base_directory: str) -> list:\n    \"\"\"\n    Recursively collects all .kv files within the screens and components directories.\n    :param base_directory: The root directory (e.g., 'views')\n    :return: A list of .kv file paths relative to the base directory.\n    \"\"\"\n    kv_files = []\n    for subdir in [\"screens\", \"components\"]:\n        target_dir = os.path.join(os.getcwd() + \"/src\", base_directory, subdir)\n        for root, _, files in os.walk(target_dir):",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "Window.left",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "Window.left = 0  # TODO: Remove this line\nWindow.top = 0  # TODO: Remove this line\ndef get_all_kv_files(base_directory: str) -> list:\n    \"\"\"\n    Recursively collects all .kv files within the screens and components directories.\n    :param base_directory: The root directory (e.g., 'views')\n    :return: A list of .kv file paths relative to the base directory.\n    \"\"\"\n    kv_files = []\n    for subdir in [\"screens\", \"components\"]:",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "Window.top",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "Window.top = 0  # TODO: Remove this line\ndef get_all_kv_files(base_directory: str) -> list:\n    \"\"\"\n    Recursively collects all .kv files within the screens and components directories.\n    :param base_directory: The root directory (e.g., 'views')\n    :return: A list of .kv file paths relative to the base directory.\n    \"\"\"\n    kv_files = []\n    for subdir in [\"screens\", \"components\"]:\n        target_dir = os.path.join(os.getcwd() + \"/src\", base_directory, subdir)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "ThemeManager",
        "kind": 6,
        "importPath": "src.theme",
        "description": "src.theme",
        "peekOfCode": "class ThemeManager(EventDispatcher):\n    \"\"\"\n    Manages the theme of the application.\n    This is a singleton class\n    \"\"\"\n    current_theme = OptionProperty(\"dark\", options=[\"light\", \"dark\"])\n    bg_color = ColorProperty()\n    secondary_bg_color = ColorProperty()\n    text_color = ColorProperty()\n    secondary_text_color = ColorProperty()",
        "detail": "src.theme",
        "documentation": {}
    },
    {
        "label": "convert_hex_to_decimal",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def convert_hex_to_decimal(hex_color: str) -> List[float]:\n    \"\"\"\n    Helper function to convert a color string into a list of decimals\n    :param hex_color: Hex color string\n    :type hex_color: str\n    \"\"\"\n    return [int(hex_color[i : i + 2], 16) / 255 for i in (0, 2, 4)]",
        "detail": "src.utils",
        "documentation": {}
    }
]